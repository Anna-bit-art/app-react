{"ast":null,"code":"var _jsxFileName = \"/Users/anna/Desktop/Work/WebstormProjects/react/my-app/src/components/Users/UsersContainer.jsx\";\nimport { connect } from \"react-redux\";\nimport { following, followingInProgress, remove, setCurrentPage, setTotalUsersCount, setUsers, toggleIsFetching } from \"../../redux/usersReducer\";\nimport React from \"react\";\nimport UsersFunctional from \"./UsersFunctional\";\nimport Preloader from \"../common/preloader/preloader\";\nimport axios from \"axios\";\nimport { UsersApi } from \"../../api/api\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nclass UsersClass extends React.Component {\n  constructor() {\n    super(...arguments);\n\n    this.onPageChange = pageNumber => {\n      this.props.setCurrentPage(pageNumber);\n      this.props.toggleIsFetching(true);\n      UsersApi.onPage(this.props.pageSize, pageNumber).then(data => {\n        this.props.toggleIsFetching(false);\n        this.props.setUsers(data.items);\n      });\n    };\n\n    this.render = () => {\n      return /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [this.props.isFetching ? /*#__PURE__*/_jsxDEV(Preloader, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 39\n        }, this) : null, /*#__PURE__*/_jsxDEV(UsersFunctional, {\n          totalUsersCount: this.props.totalUsersCount,\n          pageSize: this.props.pageSize,\n          currentPage: this.props.currentPage,\n          onPageChange: this.onPageChange,\n          users: this.props.users,\n          following: this.props.following,\n          remove: this.props.remove\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 41,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true);\n    };\n  }\n\n  componentDidMount() {\n    this.props.toggleIsFetching(true);\n    UsersApi.getUsers(this.props.pageSize, this.props.currentPage).then(data => {\n      this.props.toggleIsFetching(false);\n      this.props.setUsers(data.items); // this.props.setTotalUsersCount(response.data.totalCount);-\n    });\n  }\n\n}\n\nlet mapStateToProps = state => {\n  return {\n    users: state.usersPage.users,\n    pageSize: state.usersPage.pageSize,\n    totalUsersCount: state.usersPage.totalUsersCount,\n    currentPage: state.usersPage.currentPage,\n    isFetching: state.usersPage.isFetching,\n    followingInProgress: state.usersPage.followingInProgress\n  };\n};\n\nconst UsersContainer = connect(mapStateToProps, {\n  following,\n  remove,\n  setUsers,\n  setCurrentPage,\n  setTotalUsersCount,\n  toggleIsFetching,\n  followingInProgress\n})(UsersClass);\nexport default UsersContainer; // let mapDispatchToProps = (dispatch) => {\n//     return {\n//         following: (userId) => {dispatch(followingAC(userId))},\n//         remove: (userId) => {dispatch(removeAC(userId))},\n//         setUsers: (users) => {dispatch(setUsersAC(users))},\n//         setCurrentPage: (pageNumber) => {dispatch(setCurrentPageAC(pageNumber))},\n//         setTotalUsersCount: (totalCount) => {dispatch(setTotalUsersCountAC(totalCount))},\n//         toggleIsFetching: (isFetching) => {dispatch(toggleIsFetchingAC(isFetching))}\n//     }\n// }","map":{"version":3,"sources":["/Users/anna/Desktop/Work/WebstormProjects/react/my-app/src/components/Users/UsersContainer.jsx"],"names":["connect","following","followingInProgress","remove","setCurrentPage","setTotalUsersCount","setUsers","toggleIsFetching","React","UsersFunctional","Preloader","axios","UsersApi","UsersClass","Component","onPageChange","pageNumber","props","onPage","pageSize","then","data","items","render","isFetching","totalUsersCount","currentPage","users","componentDidMount","getUsers","mapStateToProps","state","usersPage","UsersContainer"],"mappings":"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","sourcesContent":["import {connect} from \"react-redux\";\nimport {\n    following,\n    followingInProgress,\n    remove,\n    setCurrentPage,\n    setTotalUsersCount,\n    setUsers,\n    toggleIsFetching\n} from \"../../redux/usersReducer\";\nimport React from \"react\";\nimport UsersFunctional from \"./UsersFunctional\";\nimport Preloader from \"../common/preloader/preloader\";\nimport axios from \"axios\";\nimport {UsersApi} from \"../../api/api\";\n\nclass UsersClass extends React.Component {\n    componentDidMount() {\n        this.props.toggleIsFetching(true);\n        UsersApi.getUsers(this.props.pageSize, this.props.currentPage)\n            .then(data => {\n                this.props.toggleIsFetching(false);\n                this.props.setUsers(data.items);\n                // this.props.setTotalUsersCount(response.data.totalCount);-\n            })\n    }\n\n    onPageChange = (pageNumber) => {\n        this.props.setCurrentPage(pageNumber);\n        this.props.toggleIsFetching(true);\n        UsersApi.onPage(this.props.pageSize, pageNumber)\n            .then(data => {\n                this.props.toggleIsFetching(false);\n                this.props.setUsers(data.items);\n            })\n    }\n\n    render = () => {\n        return <>\n            { this.props.isFetching ? <Preloader /> : null }\n            <UsersFunctional totalUsersCount={this.props.totalUsersCount}\n                             pageSize={this.props.pageSize}\n                             currentPage={this.props.currentPage}\n                             onPageChange={this.onPageChange}\n                             users={this.props.users}\n                             following={this.props.following}\n                             remove={this.props.remove}/>\n        </>\n    }\n}\n\nlet mapStateToProps = (state) => {\n    return {\n        users: state.usersPage.users,\n        pageSize: state.usersPage.pageSize,\n        totalUsersCount: state.usersPage.totalUsersCount,\n        currentPage: state.usersPage.currentPage,\n        isFetching: state.usersPage.isFetching,\n        followingInProgress: state.usersPage.followingInProgress\n    }\n}\n\nconst UsersContainer = connect (mapStateToProps,\n    {following, remove, setUsers, setCurrentPage, setTotalUsersCount, toggleIsFetching, followingInProgress})\n(UsersClass);\n\nexport default UsersContainer;\n\n// let mapDispatchToProps = (dispatch) => {\n//     return {\n//         following: (userId) => {dispatch(followingAC(userId))},\n//         remove: (userId) => {dispatch(removeAC(userId))},\n//         setUsers: (users) => {dispatch(setUsersAC(users))},\n//         setCurrentPage: (pageNumber) => {dispatch(setCurrentPageAC(pageNumber))},\n//         setTotalUsersCount: (totalCount) => {dispatch(setTotalUsersCountAC(totalCount))},\n//         toggleIsFetching: (isFetching) => {dispatch(toggleIsFetchingAC(isFetching))}\n//     }\n// }\n"]},"metadata":{},"sourceType":"module"}