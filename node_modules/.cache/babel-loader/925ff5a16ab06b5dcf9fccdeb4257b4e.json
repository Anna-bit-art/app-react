{"ast":null,"code":"var _jsxFileName = \"/Users/anna/Desktop/Work/WebstormProjects/react/my-app/src/components/Profile/ProfileContainer.jsx\";\nimport React from \"react\";\nimport Profile from \"./Profile\";\nimport { connect } from \"react-redux\";\nimport { profileUser } from \"../../redux/profileReducer\";\nimport { Navigate, useLocation, useNavigate, useParams } from \"react-router-dom\";\nimport { withAuthRedirect } from \"../../hoc/withAuthRedirect\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass ProfileClass extends React.Component {\n  componentDidMount() {\n    let userId = this.props.router.params.userId;\n\n    if (!userId) {\n      userId = 2;\n    }\n\n    this.props.profileUser(userId);\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(Profile, { ...this.props,\n        profile: this.props.profile,\n        isAuth: this.props.isAuth\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 19,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nlet AuthRedirectComponent = withAuthRedirect(ProfileClass);\n_c = AuthRedirectComponent;\n\nlet mapStateToPropsForRedirect = state => {\n  return {\n    isAuth: state.auth.isAuth\n  };\n};\n\nAuthRedirectComponent = connect(mapStateToPropsForRedirect)(AuthRedirectComponent);\n\nfunction withRouter(Component) {\n  var _s = $RefreshSig$();\n\n  function ComponentWithRouterProps(props) {\n    _s();\n\n    let location = useLocation();\n    let navigate = useNavigate();\n    let params = useParams();\n    return /*#__PURE__*/_jsxDEV(Component, { ...props,\n      router: {\n        location,\n        navigate,\n        params\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 17\n    }, this);\n  }\n\n  _s(ComponentWithRouterProps, \"G4H0N746j5KwtpeOKQjfXhEbWfg=\", false, function () {\n    return [useLocation, useNavigate, useParams];\n  });\n\n  return ComponentWithRouterProps;\n}\n\nlet mapStateToProps = state => {\n  return {\n    profile: state.profilePage.profile\n  };\n};\n\nconst ProfileContainer = connect(mapStateToProps, {\n  profileUser\n})(withRouter(AuthRedirectComponent));\nexport default ProfileContainer;\n\nvar _c;\n\n$RefreshReg$(_c, \"AuthRedirectComponent\");","map":{"version":3,"sources":["/Users/anna/Desktop/Work/WebstormProjects/react/my-app/src/components/Profile/ProfileContainer.jsx"],"names":["React","Profile","connect","profileUser","Navigate","useLocation","useNavigate","useParams","withAuthRedirect","ProfileClass","Component","componentDidMount","userId","props","router","params","render","profile","isAuth","AuthRedirectComponent","mapStateToPropsForRedirect","state","auth","withRouter","ComponentWithRouterProps","location","navigate","mapStateToProps","profilePage","ProfileContainer"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,OAAP,MAAoB,WAApB;AACA,SAAQC,OAAR,QAAsB,aAAtB;AACA,SAAQC,WAAR,QAA0B,4BAA1B;AACA,SAAQC,QAAR,EAAkBC,WAAlB,EAA+BC,WAA/B,EAA4CC,SAA5C,QAA4D,kBAA5D;AACA,SAAQC,gBAAR,QAA+B,4BAA/B;;;AAEA,MAAOC,YAAP,SAA4BT,KAAK,CAACU,SAAlC,CAA4C;AACxCC,EAAAA,iBAAiB,GAAG;AAChB,QAAIC,MAAM,GAAG,KAAKC,KAAL,CAAWC,MAAX,CAAkBC,MAAlB,CAAyBH,MAAtC;;AACA,QAAG,CAACA,MAAJ,EAAW;AACPA,MAAAA,MAAM,GAAG,CAAT;AACH;;AACD,SAAKC,KAAL,CAAWV,WAAX,CAAuBS,MAAvB;AACH;;AACDI,EAAAA,MAAM,GAAI;AACN,wBACI;AAAA,6BACI,QAAC,OAAD,OAAa,KAAKH,KAAlB;AAAyB,QAAA,OAAO,EAAE,KAAKA,KAAL,CAAWI,OAA7C;AAAsD,QAAA,MAAM,EAAE,KAAKJ,KAAL,CAAWK;AAAzE;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,YADJ;AAKH;;AAduC;;AAiB5C,IAAIC,qBAAqB,GAAGX,gBAAgB,CAACC,YAAD,CAA5C;KAAIU,qB;;AACJ,IAAIC,0BAA0B,GAAIC,KAAD,IAAW;AACxC,SAAO;AACHH,IAAAA,MAAM,EAAEG,KAAK,CAACC,IAAN,CAAWJ;AADhB,GAAP;AAGH,CAJD;;AAKAC,qBAAqB,GAAGjB,OAAO,CAACkB,0BAAD,CAAP,CAAqCD,qBAArC,CAAxB;;AAEI,SAASI,UAAT,CAAoBb,SAApB,EAA+B;AAAA;;AAC3B,WAASc,wBAAT,CAAkCX,KAAlC,EAAyC;AAAA;;AACrC,QAAIY,QAAQ,GAAGpB,WAAW,EAA1B;AACA,QAAIqB,QAAQ,GAAGpB,WAAW,EAA1B;AACA,QAAIS,MAAM,GAAGR,SAAS,EAAtB;AACA,wBACI,QAAC,SAAD,OAAeM,KAAf;AAAsB,MAAA,MAAM,EAAE;AAACY,QAAAA,QAAD;AAAWC,QAAAA,QAAX;AAAqBX,QAAAA;AAArB;AAA9B;AAAA;AAAA;AAAA;AAAA,YADJ;AAGH;;AAR0B,KAClBS,wBADkB;AAAA,YAERnB,WAFQ,EAGRC,WAHQ,EAIVC,SAJU;AAAA;;AAU3B,SAAOiB,wBAAP;AACH;;AAED,IAAIG,eAAe,GAAIN,KAAD,IAAW;AAC7B,SAAO;AACHJ,IAAAA,OAAO,EAAEI,KAAK,CAACO,WAAN,CAAkBX;AADxB,GAAP;AAGH,CAJD;;AAMJ,MAAMY,gBAAgB,GAAG3B,OAAO,CAAEyB,eAAF,EAAmB;AAACxB,EAAAA;AAAD,CAAnB,CAAP,CAA0CoB,UAAU,CAACJ,qBAAD,CAApD,CAAzB;AACA,eAAeU,gBAAf","sourcesContent":["import React from \"react\";\nimport Profile from \"./Profile\";\nimport {connect} from \"react-redux\";\nimport {profileUser} from \"../../redux/profileReducer\";\nimport {Navigate, useLocation, useNavigate, useParams} from \"react-router-dom\";\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\n\nclass  ProfileClass extends React.Component {\n    componentDidMount() {\n        let userId = this.props.router.params.userId;\n        if(!userId){\n            userId = 2;\n        }\n        this.props.profileUser(userId);\n    }\n    render () {\n        return (\n            <div>\n                <Profile {...this.props} profile={this.props.profile} isAuth={this.props.isAuth}/>\n            </div>\n        )\n    }\n}\n\nlet AuthRedirectComponent = withAuthRedirect(ProfileClass);\nlet mapStateToPropsForRedirect = (state) => {\n    return {\n        isAuth: state.auth.isAuth\n    }\n}\nAuthRedirectComponent = connect(mapStateToPropsForRedirect) (AuthRedirectComponent);\n\n    function withRouter(Component) {\n        function ComponentWithRouterProps(props) {\n            let location = useLocation();\n            let navigate = useNavigate();\n            let params = useParams();\n            return (\n                <Component {...props} router={{location, navigate, params}}/>\n            );\n        }\n\n        return ComponentWithRouterProps;\n    }\n\n    let mapStateToProps = (state) => {\n        return {\n            profile: state.profilePage.profile,\n        }\n    }\n\nconst ProfileContainer = connect (mapStateToProps, {profileUser}) (withRouter(AuthRedirectComponent));\nexport default ProfileContainer;"]},"metadata":{},"sourceType":"module"}