{"ast":null,"code":"import React from \"react\";\nimport { addMessageActionCreator, updateNewMessageTextActionText } from \"../redux/messagesReducer\";\nimport Messages from \"./Messages\";\nimport { connect } from \"react-redux\"; // моя контейнерная компонента\n// const MessagesContainer = () => {\n//     return (\n//         <StoreContext.Consumer>{(store) => {\n//             let sendMessage = () => {\n//                 store.dispatch(addMessageActionCreator());\n//             }\n//             let onMessageChange = (text) => {\n//                 store.dispatch(updateNewMessageTextActionText(text));\n//             }\n//             return <Messages addMessage={sendMessage}\n//                              updateNewMessage={onMessageChange}\n//                              dialogs={store.getState().messagesPage.dialogs}\n//                              messages={store.getState().messagesPage.messages}\n//                              newMessageText={store.getState().messagesPage.newMessageText}/>\n//             }\n//         }\n//         </StoreContext.Consumer>\n//     )\n// }\n\nlet mapStateToProps = state => {\n  return {\n    dialogs: state.messagesPage.dialogs,\n    messages: state.messagesPage.messages,\n    newMessageText: state.messagesPage.newMessageText\n  };\n};\n\nlet mapDispatchToProps = dispatch => {\n  return {\n    addMessage: () => {\n      dispatch(addMessageActionCreator());\n    },\n\n    updateNewMessage(text) {\n      dispatch(updateNewMessageTextActionText(text));\n    }\n\n  };\n};\n\nconst SuperMessagesContainer = connect(mapStateToProps, mapDispatchToProps)(Messages);\nexport default SuperMessagesContainer;","map":{"version":3,"sources":["/Users/anna/Desktop/Work/WebstormProjects/react/my-app/src/components/Messages/MessagesContainer.jsx"],"names":["React","addMessageActionCreator","updateNewMessageTextActionText","Messages","connect","mapStateToProps","state","dialogs","messagesPage","messages","newMessageText","mapDispatchToProps","dispatch","addMessage","updateNewMessage","text","SuperMessagesContainer"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAAQC,uBAAR,EAAiCC,8BAAjC,QAAsE,0BAAtE;AACA,OAAOC,QAAP,MAAqB,YAArB;AACA,SAAQC,OAAR,QAAsB,aAAtB,C,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,IAAIC,eAAe,GAAIC,KAAD,IAAW;AAC7B,SAAO;AACHC,IAAAA,OAAO,EAAED,KAAK,CAACE,YAAN,CAAmBD,OADzB;AAEHE,IAAAA,QAAQ,EAAEH,KAAK,CAACE,YAAN,CAAmBC,QAF1B;AAGHC,IAAAA,cAAc,EAAEJ,KAAK,CAACE,YAAN,CAAmBE;AAHhC,GAAP;AAKH,CAND;;AAQA,IAAIC,kBAAkB,GAAIC,QAAD,IAAc;AACnC,SAAO;AACHC,IAAAA,UAAU,EAAE,MAAM;AACVD,MAAAA,QAAQ,CAACX,uBAAuB,EAAxB,CAAR;AACH,KAHF;;AAIHa,IAAAA,gBAAgB,CAACC,IAAD,EAAO;AACnBH,MAAAA,QAAQ,CAACV,8BAA8B,CAACa,IAAD,CAA/B,CAAR;AACH;;AANE,GAAP;AAQH,CATD;;AAWA,MAAMC,sBAAsB,GAAGZ,OAAO,CAACC,eAAD,EAAkBM,kBAAlB,CAAP,CAA8CR,QAA9C,CAA/B;AAMA,eAAea,sBAAf","sourcesContent":["import React from \"react\";\nimport {addMessageActionCreator, updateNewMessageTextActionText} from \"../redux/messagesReducer\";\nimport Messages from \"./Messages\";\nimport {connect} from \"react-redux\";\n\n// моя контейнерная компонента\n// const MessagesContainer = () => {\n//     return (\n//         <StoreContext.Consumer>{(store) => {\n//             let sendMessage = () => {\n//                 store.dispatch(addMessageActionCreator());\n//             }\n//             let onMessageChange = (text) => {\n//                 store.dispatch(updateNewMessageTextActionText(text));\n//             }\n//             return <Messages addMessage={sendMessage}\n//                              updateNewMessage={onMessageChange}\n//                              dialogs={store.getState().messagesPage.dialogs}\n//                              messages={store.getState().messagesPage.messages}\n//                              newMessageText={store.getState().messagesPage.newMessageText}/>\n//             }\n//         }\n//         </StoreContext.Consumer>\n//     )\n// }\n\nlet mapStateToProps = (state) => {\n    return {\n        dialogs: state.messagesPage.dialogs,\n        messages: state.messagesPage.messages,\n        newMessageText: state.messagesPage.newMessageText\n    }\n}\n\nlet mapDispatchToProps = (dispatch) => {\n    return {\n        addMessage: () => {\n                dispatch(addMessageActionCreator());\n            },\n        updateNewMessage(text) {\n            dispatch(updateNewMessageTextActionText(text));\n        }\n    }\n}\n\nconst SuperMessagesContainer = connect(mapStateToProps, mapDispatchToProps) (Messages);\n\n\n\n\n\nexport default SuperMessagesContainer;"]},"metadata":{},"sourceType":"module"}