{"ast":null,"code":"var _jsxFileName = \"/Users/anna/Desktop/Work/WebstormProjects/react/my-app/src/components/Users/UsersContainer.jsx\";\nimport { connect } from \"react-redux\";\nimport { following, remove, setCurrentPage, setTotalUsersCount, setUsers, toggleIsFetching } from \"../redux/usersReducer\";\nimport React from \"react\";\nimport axios from \"axios\";\nimport UsersFunctional from \"./UsersFunctional\";\nimport Preloader from \"../common/preloader/preloader\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nclass UsersClass extends React.Component {\n  constructor() {\n    super(...arguments);\n\n    this.onPageChange = pageNumber => {\n      this.props.setCurrentPage(pageNumber);\n      this.props.toggleIsFetching(true);\n      axios.get(`https://social-network.samuraijs.com/api/1.0/users?count=${this.props.pageSize}&page=${this.props.currentPage}`).then(response => {\n        this.props.toggleIsFetching(false);\n        this.props.setUsers(response.data.items);\n      });\n    };\n\n    this.render = () => {\n      return /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [this.props.isFetching ? /*#__PURE__*/_jsxDEV(Preloader, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 32,\n          columnNumber: 39\n        }, this) : null, /*#__PURE__*/_jsxDEV(UsersFunctional, {\n          totalUsersCount: this.props.totalUsersCount,\n          pageSize: this.props.pageSize,\n          currentPage: this.props.currentPage,\n          onPageChange: this.onPageChange,\n          users: this.props.users,\n          following: this.props.following,\n          remove: this.props.remove\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 33,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true);\n    };\n  }\n\n  componentDidMount() {\n    this.props.toggleIsFetching(true);\n    axios.get(`https://social-network.samuraijs.com/api/1.0/users?count=${this.props.pageSize}&page=${this.props.currentPage}`).then(response => {\n      this.props.toggleIsFetching(false);\n      this.props.setUsers(response.data.items);\n      this.props.setTotalUsersCount(response.data.totalCount);\n    });\n  }\n\n}\n\nlet mapStateToProps = state => {\n  return {\n    users: state.usersPage.users,\n    pageSize: state.usersPage.pageSize,\n    totalUsersCount: state.usersPage.totalUsersCount,\n    currentPage: state.usersPage.currentPage,\n    isFetching: state.usersPage.isFetching\n  };\n};\n\nconst UsersContainer = connect(mapStateToProps, {\n  following,\n  remove,\n  setUsers,\n  setCurrentPage,\n  setTotalUsersCount,\n  toggleIsFetching\n})(UsersClass);\nexport default UsersContainer; // let mapDispatchToProps = (dispatch) => {\n//     return {\n//         following: (userId) => {dispatch(followingAC(userId))},\n//         remove: (userId) => {dispatch(removeAC(userId))},\n//         setUsers: (users) => {dispatch(setUsersAC(users))},\n//         setCurrentPage: (pageNumber) => {dispatch(setCurrentPageAC(pageNumber))},\n//         setTotalUsersCount: (totalCount) => {dispatch(setTotalUsersCountAC(totalCount))},\n//         toggleIsFetching: (isFetching) => {dispatch(toggleIsFetchingAC(isFetching))}\n//     }\n// }","map":{"version":3,"sources":["/Users/anna/Desktop/Work/WebstormProjects/react/my-app/src/components/Users/UsersContainer.jsx"],"names":["connect","following","remove","setCurrentPage","setTotalUsersCount","setUsers","toggleIsFetching","React","axios","UsersFunctional","Preloader","UsersClass","Component","onPageChange","pageNumber","props","get","pageSize","currentPage","then","response","data","items","render","isFetching","totalUsersCount","users","componentDidMount","totalCount","mapStateToProps","state","usersPage","UsersContainer"],"mappings":";AAAA,SAAQA,OAAR,QAAsB,aAAtB;AACA,SAAQC,SAAR,EAAmBC,MAAnB,EAA2BC,cAA3B,EAA2CC,kBAA3C,EAA+DC,QAA/D,EAAyEC,gBAAzE,QAAgG,uBAAhG;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,eAAP,MAA4B,mBAA5B;AACA,OAAOC,SAAP,MAAsB,+BAAtB;;;;AAGA,MAAMC,UAAN,SAAyBJ,KAAK,CAACK,SAA/B,CAAyC;AAAA;AAAA;;AAAA,SAWrCC,YAXqC,GAWrBC,UAAD,IAAgB;AAC3B,WAAKC,KAAL,CAAWZ,cAAX,CAA0BW,UAA1B;AACA,WAAKC,KAAL,CAAWT,gBAAX,CAA4B,IAA5B;AACAE,MAAAA,KAAK,CAACQ,GAAN,CAAW,4DAA2D,KAAKD,KAAL,CAAWE,QAAS,SAAQ,KAAKF,KAAL,CAAWG,WAAY,EAAzH,EACKC,IADL,CACUC,QAAQ,IAAI;AACd,aAAKL,KAAL,CAAWT,gBAAX,CAA4B,KAA5B;AACA,aAAKS,KAAL,CAAWV,QAAX,CAAoBe,QAAQ,CAACC,IAAT,CAAcC,KAAlC;AACH,OAJL;AAKH,KAnBoC;;AAAA,SAqBrCC,MArBqC,GAqB5B,MAAM;AACX,0BAAO;AAAA,mBACD,KAAKR,KAAL,CAAWS,UAAX,gBAAwB,QAAC,SAAD;AAAA;AAAA;AAAA;AAAA,gBAAxB,GAAwC,IADvC,eAEH,QAAC,eAAD;AAAiB,UAAA,eAAe,EAAE,KAAKT,KAAL,CAAWU,eAA7C;AACiB,UAAA,QAAQ,EAAE,KAAKV,KAAL,CAAWE,QADtC;AAEiB,UAAA,WAAW,EAAE,KAAKF,KAAL,CAAWG,WAFzC;AAGiB,UAAA,YAAY,EAAE,KAAKL,YAHpC;AAIiB,UAAA,KAAK,EAAE,KAAKE,KAAL,CAAWW,KAJnC;AAKiB,UAAA,SAAS,EAAE,KAAKX,KAAL,CAAWd,SALvC;AAMiB,UAAA,MAAM,EAAE,KAAKc,KAAL,CAAWb;AANpC;AAAA;AAAA;AAAA;AAAA,gBAFG;AAAA,sBAAP;AAUH,KAhCoC;AAAA;;AACrCyB,EAAAA,iBAAiB,GAAG;AAChB,SAAKZ,KAAL,CAAWT,gBAAX,CAA4B,IAA5B;AACAE,IAAAA,KAAK,CAACQ,GAAN,CAAW,4DAA2D,KAAKD,KAAL,CAAWE,QAAS,SAAQ,KAAKF,KAAL,CAAWG,WAAY,EAAzH,EACKC,IADL,CACUC,QAAQ,IAAI;AACd,WAAKL,KAAL,CAAWT,gBAAX,CAA4B,KAA5B;AACA,WAAKS,KAAL,CAAWV,QAAX,CAAoBe,QAAQ,CAACC,IAAT,CAAcC,KAAlC;AACA,WAAKP,KAAL,CAAWX,kBAAX,CAA8BgB,QAAQ,CAACC,IAAT,CAAcO,UAA5C;AACH,KALL;AAMH;;AAToC;;AAmCzC,IAAIC,eAAe,GAAIC,KAAD,IAAW;AAC7B,SAAO;AACHJ,IAAAA,KAAK,EAAEI,KAAK,CAACC,SAAN,CAAgBL,KADpB;AAEHT,IAAAA,QAAQ,EAAEa,KAAK,CAACC,SAAN,CAAgBd,QAFvB;AAGHQ,IAAAA,eAAe,EAAEK,KAAK,CAACC,SAAN,CAAgBN,eAH9B;AAIHP,IAAAA,WAAW,EAAEY,KAAK,CAACC,SAAN,CAAgBb,WAJ1B;AAKHM,IAAAA,UAAU,EAAEM,KAAK,CAACC,SAAN,CAAgBP;AALzB,GAAP;AAOH,CARD;;AAWA,MAAMQ,cAAc,GAAGhC,OAAO,CAAE6B,eAAF,EAC1B;AAAC5B,EAAAA,SAAD;AAAYC,EAAAA,MAAZ;AAAoBG,EAAAA,QAApB;AAA8BF,EAAAA,cAA9B;AAA8CC,EAAAA,kBAA9C;AAAkEE,EAAAA;AAAlE,CAD0B,CAAP,CAEtBK,UAFsB,CAAvB;AAIA,eAAeqB,cAAf,C,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import {connect} from \"react-redux\";\nimport {following, remove, setCurrentPage, setTotalUsersCount, setUsers, toggleIsFetching} from \"../redux/usersReducer\";\nimport React from \"react\";\nimport axios from \"axios\";\nimport UsersFunctional from \"./UsersFunctional\";\nimport Preloader from \"../common/preloader/preloader\";\n\n\nclass UsersClass extends React.Component {\n    componentDidMount() {\n        this.props.toggleIsFetching(true);\n        axios.get(`https://social-network.samuraijs.com/api/1.0/users?count=${this.props.pageSize}&page=${this.props.currentPage}`)\n            .then(response => {\n                this.props.toggleIsFetching(false);\n                this.props.setUsers(response.data.items);\n                this.props.setTotalUsersCount(response.data.totalCount);\n            })\n    }\n\n    onPageChange = (pageNumber) => {\n        this.props.setCurrentPage(pageNumber);\n        this.props.toggleIsFetching(true);\n        axios.get(`https://social-network.samuraijs.com/api/1.0/users?count=${this.props.pageSize}&page=${this.props.currentPage}`)\n            .then(response => {\n                this.props.toggleIsFetching(false);\n                this.props.setUsers(response.data.items)\n            })\n    }\n\n    render = () => {\n        return <>\n            { this.props.isFetching ? <Preloader /> : null }\n            <UsersFunctional totalUsersCount={this.props.totalUsersCount}\n                             pageSize={this.props.pageSize}\n                             currentPage={this.props.currentPage}\n                             onPageChange={this.onPageChange}\n                             users={this.props.users}\n                             following={this.props.following}\n                             remove={this.props.remove}/>\n        </>\n    }\n}\n\nlet mapStateToProps = (state) => {\n    return {\n        users: state.usersPage.users,\n        pageSize: state.usersPage.pageSize,\n        totalUsersCount: state.usersPage.totalUsersCount,\n        currentPage: state.usersPage.currentPage,\n        isFetching: state.usersPage.isFetching\n    }\n}\n\n\nconst UsersContainer = connect (mapStateToProps,\n    {following, remove, setUsers, setCurrentPage, setTotalUsersCount, toggleIsFetching})\n(UsersClass);\n\nexport default UsersContainer;\n\n// let mapDispatchToProps = (dispatch) => {\n//     return {\n//         following: (userId) => {dispatch(followingAC(userId))},\n//         remove: (userId) => {dispatch(removeAC(userId))},\n//         setUsers: (users) => {dispatch(setUsersAC(users))},\n//         setCurrentPage: (pageNumber) => {dispatch(setCurrentPageAC(pageNumber))},\n//         setTotalUsersCount: (totalCount) => {dispatch(setTotalUsersCountAC(totalCount))},\n//         toggleIsFetching: (isFetching) => {dispatch(toggleIsFetchingAC(isFetching))}\n//     }\n// }\n"]},"metadata":{},"sourceType":"module"}