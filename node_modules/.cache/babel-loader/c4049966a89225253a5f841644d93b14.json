{"ast":null,"code":"import { UsersApi } from \"../api/api\";\nconst SET_USER_DATA = 'SET_USER_DATA';\nlet initialState = {\n  id: null,\n  email: null,\n  login: null,\n  isAuth: false,\n  isFetching: false\n};\n\nconst authReducer = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case SET_USER_DATA:\n      return { ...state,\n        ...action.data,\n        isAuth: true\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport const setAuthUserData = (id, email, login) => ({\n  type: SET_USER_DATA,\n  data: {\n    id,\n    email,\n    login\n  }\n});\nexport default authReducer;\nexport const auth = dispatch => {\n  return () => {\n    UsersApi.auth().then(data => {\n      if (data.resultCode === 0) {\n        let {\n          id,\n          email,\n          login\n        } = data.data;\n        this.props.setAuthUserData(id, email, login);\n      }\n    });\n  };\n};","map":{"version":3,"sources":["/Users/anna/Desktop/Work/WebstormProjects/react/my-app/src/redux/authReducer.js"],"names":["UsersApi","SET_USER_DATA","initialState","id","email","login","isAuth","isFetching","authReducer","state","action","type","data","setAuthUserData","auth","dispatch","then","resultCode","props"],"mappings":"AAAA,SAAQA,QAAR,QAAuB,YAAvB;AAEA,MAAMC,aAAa,GAAG,eAAtB;AAGA,IAAIC,YAAY,GAAG;AACfC,EAAAA,EAAE,EAAE,IADW;AAEfC,EAAAA,KAAK,EAAE,IAFQ;AAGfC,EAAAA,KAAK,EAAE,IAHQ;AAIfC,EAAAA,MAAM,EAAE,KAJO;AAKfC,EAAAA,UAAU,EAAE;AALG,CAAnB;;AAQA,MAAMC,WAAW,GAAG,YAAkC;AAAA,MAAjCC,KAAiC,uEAAzBP,YAAyB;AAAA,MAAXQ,MAAW;;AAClD,UAAQA,MAAM,CAACC,IAAf;AACI,SAAKV,aAAL;AACI,aAAO,EACH,GAAGQ,KADA;AAEH,WAAGC,MAAM,CAACE,IAFP;AAGHN,QAAAA,MAAM,EAAE;AAHL,OAAP;;AAKJ;AACI,aAAOG,KAAP;AARR;AAUH,CAXD;;AAaA,OAAO,MAAMI,eAAe,GAAG,CAACV,EAAD,EAAKC,KAAL,EAAYC,KAAZ,MAAuB;AAACM,EAAAA,IAAI,EAACV,aAAN;AAAqBW,EAAAA,IAAI,EAAC;AAACT,IAAAA,EAAD;AAAKC,IAAAA,KAAL;AAAYC,IAAAA;AAAZ;AAA1B,CAAvB,CAAxB;AACP,eAAeG,WAAf;AAEA,OAAO,MAAMM,IAAI,GAAIC,QAAD,IAAc;AAC9B,SAAO,MAAM;AACTf,IAAAA,QAAQ,CAACc,IAAT,GACKE,IADL,CACUJ,IAAI,IAAI;AACV,UAAGA,IAAI,CAACK,UAAL,KAAoB,CAAvB,EAA0B;AACtB,YAAI;AAACd,UAAAA,EAAD;AAAKC,UAAAA,KAAL;AAAYC,UAAAA;AAAZ,YAAqBO,IAAI,CAACA,IAA9B;AACA,aAAKM,KAAL,CAAWL,eAAX,CAA2BV,EAA3B,EAA+BC,KAA/B,EAAsCC,KAAtC;AACH;AACJ,KANL;AAOH,GARD;AASH,CAVM","sourcesContent":["import {UsersApi} from \"../api/api\";\n\nconst SET_USER_DATA = 'SET_USER_DATA';\n\n\nlet initialState = {\n    id: null,\n    email: null,\n    login: null,\n    isAuth: false,\n    isFetching: false\n}\n\nconst authReducer = (state = initialState, action) => {\n    switch (action.type) {\n        case SET_USER_DATA:\n            return {\n                ...state,\n                ...action.data,\n                isAuth: true\n            }\n        default:\n            return state;\n    }\n}\n\nexport const setAuthUserData = (id, email, login) => ({type:SET_USER_DATA, data:{id, email, login}});\nexport default authReducer;\n\nexport const auth = (dispatch) => {\n    return () => {\n        UsersApi.auth()\n            .then(data => {\n                if(data.resultCode === 0) {\n                    let {id, email, login} = data.data;\n                    this.props.setAuthUserData(id, email, login);\n                }\n            })\n    }\n}"]},"metadata":{},"sourceType":"module"}