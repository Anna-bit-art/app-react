{"ast":null,"code":"import { addMessage, updateNewMessage } from \"../../redux/messagesReducer\";\nimport Messages from \"./Messages\";\nimport { connect } from \"react-redux\";\nimport { Navigate } from \"react-router-dom\";\nimport React from \"react\";\nimport { withAuthRedirect } from \"../../hoc/withAuthRedirect\";\nlet AuthRedirectComponent = withAuthRedirect(Messages);\n_c = AuthRedirectComponent;\n\nlet mapStateToPropsForRedirect = state => {\n  return {\n    isAuth: state.auth.isAuth\n  };\n};\n\nAuthRedirectComponent = connect(mapStateToPropsForRedirect)(AuthRedirectComponent);\n\nlet mapStateToProps = state => {\n  return {\n    dialogs: state.messagesPage.dialogs,\n    messages: state.messagesPage.messages,\n    newMessageText: state.messagesPage.newMessageText,\n    isAuth: state.auth.isAuth\n  };\n};\n\nconst MessagesContainer = connect(mapStateToProps, {\n  addMessage,\n  updateNewMessage\n})(AuthRedirectComponent);\nexport default MessagesContainer; // моя контейнерная компонента\n// const MessagesContainer = () => {\n//     return (\n//         <StoreContext.Consumer>{(store) => {\n//             let sendMessage = () => {\n//                 store.dispatch(addMessageActionCreator());\n//             }\n//             let onMessageChange = (text) => {\n//                 store.dispatch(updateNewMessageTextActionText(text));\n//             }\n//             return <Messages addMessage={sendMessage}\n//                              updateNewMessage={onMessageChange}\n//                              dialogs={store.getState().messagesPage.dialogs}\n//                              messages={store.getState().messagesPage.messages}\n//                              newMessageText={store.getState().messagesPage.newMessageText}/>\n//             }\n//         }\n//         </StoreContext.Consumer>\n//     )\n// }\n//\n// let mapDispatchToProps = (dispatch) => {\n//     return {\n//         addMessage() {\n//             dispatch(addMessageActionCreator());\n//             },\n//         updateNewMessage(text) {\n//             dispatch(updateNewMessageTextActionText(text));\n//         }\n//     }\n// }\n\nvar _c;\n\n$RefreshReg$(_c, \"AuthRedirectComponent\");","map":{"version":3,"sources":["/Users/anna/Desktop/Work/WebstormProjects/react/my-app/src/components/Messages/MessagesContainer.jsx"],"names":["addMessage","updateNewMessage","Messages","connect","Navigate","React","withAuthRedirect","AuthRedirectComponent","mapStateToPropsForRedirect","state","isAuth","auth","mapStateToProps","dialogs","messagesPage","messages","newMessageText","MessagesContainer"],"mappings":"AAAA,SAAQA,UAAR,EAAoBC,gBAApB,QAA4C,6BAA5C;AACA,OAAOC,QAAP,MAAqB,YAArB;AACA,SAAQC,OAAR,QAAsB,aAAtB;AACA,SAAQC,QAAR,QAAuB,kBAAvB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAAQC,gBAAR,QAA+B,4BAA/B;AAEA,IAAIC,qBAAqB,GAAGD,gBAAgB,CAACJ,QAAD,CAA5C;KAAIK,qB;;AACJ,IAAIC,0BAA0B,GAAIC,KAAD,IAAW;AACxC,SAAO;AACHC,IAAAA,MAAM,EAAED,KAAK,CAACE,IAAN,CAAWD;AADhB,GAAP;AAGH,CAJD;;AAKAH,qBAAqB,GAAGJ,OAAO,CAACK,0BAAD,CAAP,CAAqCD,qBAArC,CAAxB;;AAKA,IAAIK,eAAe,GAAIH,KAAD,IAAW;AAC7B,SAAO;AACHI,IAAAA,OAAO,EAAEJ,KAAK,CAACK,YAAN,CAAmBD,OADzB;AAEHE,IAAAA,QAAQ,EAAEN,KAAK,CAACK,YAAN,CAAmBC,QAF1B;AAGHC,IAAAA,cAAc,EAAEP,KAAK,CAACK,YAAN,CAAmBE,cAHhC;AAIHN,IAAAA,MAAM,EAAED,KAAK,CAACE,IAAN,CAAWD;AAJhB,GAAP;AAMH,CAPD;;AAQA,MAAMO,iBAAiB,GAAGd,OAAO,CAACS,eAAD,EAAkB;AAACZ,EAAAA,UAAD;AAAaC,EAAAA;AAAb,CAAlB,CAAP,CAA0DM,qBAA1D,CAA1B;AACA,eAAeU,iBAAf,C,CAWA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import {addMessage, updateNewMessage,} from \"../../redux/messagesReducer\";\nimport Messages from \"./Messages\";\nimport {connect} from \"react-redux\";\nimport {Navigate} from \"react-router-dom\";\nimport React from \"react\";\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\n\nlet AuthRedirectComponent = withAuthRedirect(Messages);\nlet mapStateToPropsForRedirect = (state) => {\n    return {\n        isAuth: state.auth.isAuth\n    }\n}\nAuthRedirectComponent = connect(mapStateToPropsForRedirect) (AuthRedirectComponent);\n\n\n\n\nlet mapStateToProps = (state) => {\n    return {\n        dialogs: state.messagesPage.dialogs,\n        messages: state.messagesPage.messages,\n        newMessageText: state.messagesPage.newMessageText,\n        isAuth: state.auth.isAuth\n    }\n}\nconst MessagesContainer = connect(mapStateToProps, {addMessage, updateNewMessage}) (AuthRedirectComponent);\nexport default MessagesContainer;\n\n\n\n\n\n\n\n\n\n\n// моя контейнерная компонента\n// const MessagesContainer = () => {\n//     return (\n//         <StoreContext.Consumer>{(store) => {\n//             let sendMessage = () => {\n//                 store.dispatch(addMessageActionCreator());\n//             }\n//             let onMessageChange = (text) => {\n//                 store.dispatch(updateNewMessageTextActionText(text));\n//             }\n//             return <Messages addMessage={sendMessage}\n//                              updateNewMessage={onMessageChange}\n//                              dialogs={store.getState().messagesPage.dialogs}\n//                              messages={store.getState().messagesPage.messages}\n//                              newMessageText={store.getState().messagesPage.newMessageText}/>\n//             }\n//         }\n//         </StoreContext.Consumer>\n//     )\n// }\n\n//\n// let mapDispatchToProps = (dispatch) => {\n//     return {\n//         addMessage() {\n//             dispatch(addMessageActionCreator());\n//             },\n//         updateNewMessage(text) {\n//             dispatch(updateNewMessageTextActionText(text));\n//         }\n//     }\n// }"]},"metadata":{},"sourceType":"module"}